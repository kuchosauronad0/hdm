name: publish üê≥ Docker image

on:
  workflow_run:
    workflows: ["Run CI üçïüòã"]
    branches: [main]
    types:
      - completed
  push:
    branches:
      - 'main'
    tags:
      - '*'
  pull_request:
    branches:
      - main

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write
  packages: write

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # just a name, but storing it separately as we're nice people
  DOCKER_IMAGE_ARTIFACT_NAME: Docker image
  DOCKER_IMAGE_OUTPUT_LOCATION: /tmp
  DOCKER_IMAGE_TAR_LOCATION: /tmp/docker-image.tar # notice /tmp same as DOCKER_IMAGE_OUTPUT_LOCATION

concurrency:
  # each new commit to a PR runs this workflow
  # so we need to avoid a long running older one from overwriting the 'pr-<number>-latest'
  group: "${{ github.workflow }} @ ${{ github.ref_name }}"
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0

      - name: Check if we actually made changes
        uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # tag=v2.11.1
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/file-filters.yml

  docker-build:
    runs-on: ubuntu-latest
    needs:
      - changes
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325 # tag=v2.2.1

# TODO validate no changes between github.event.pull_request.head.sha and the actual current sha (representing the hypothetical merge)

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea # tag=v4.1.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr,suffix=-latest
            type=raw,value=pr-${{ github.event.pull_request.base.sha }}-${{ github.event.pull_request.head.sha }}
          labels: |
           org.opencontainers.image.version=pr-${{ github.event.number }}
           org.opencontainers.image.source=${{ github.event.pull_request.html_url }}


      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # tag=v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase the image name
        shell: bash
        run: |
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}

      - name: Build Docker image
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5 # tag=v3.2.0
        with:
          context: .
          # this container is THE PR's artifact, and we will re-tag it
          # once the PR has been accepted
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          outputs: type=docker,dest=${{ env.DOCKER_IMAGE_TAR_LOCATION }}

      - name: Upload artifact
        uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3.2.1
        with:
          name: ${{ env.DOCKER_IMAGE_ARTIFACT_NAME }}
          path: ${{ env.DOCKER_IMAGE_TAR_LOCATION }}

  docker-publish:
    name: Publish Docker container
    runs-on: ubuntu-latest
    needs:
      - docker-build
    if: ${{ github.repository == 'kuchosauronad0/hdm' && github.event_name == 'pull_request' }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325 # tag=v2.2.1

      - name: Download artifact
        uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7 # tag=v3.0.1
        with:
          name: ${{ env.DOCKER_IMAGE_ARTIFACT_NAME }}
          path: ${{ env.DOCKER_IMAGE_OUTPUT_LOCATION }}

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # tag=v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load image from artifact
        shell: bash
        run: |
          docker load --input ${{ env.DOCKER_IMAGE_TAR_LOCATION }}
      - name: Push image with all tags
        shell: bash
        run: |
          docker push ${REGISTRY,,}/${IMAGE_NAME,,} --all-tags

  all-done:
    name: All done
    # this is the job that should be marked as required on GitHub. It's the only one that'll reliably trigger
    # when any upstream fails: success
    # when all upstream skips: pass
    # when all upstream success: success
    # combination of upstream skip and success: success
    runs-on: ubuntu-latest
    needs:
      - docker-build
      - docker-publish
    if: ${{ always() }}
    steps:
      - name: Fail!
        shell: bash
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: |
          echo "One / more upstream failed or was cancelled. Failing job..."
          exit 1
      - name: Success!
        shell: bash
        run: |
          echo "Great success!"
